docker安装
yum install -y yum-utils device-mapper-persistent-data lvm2

yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

yum-config-manager --enable docker-ce-edge

yum-config-manager --enable docker-ce-test


yum install -y docker-ce

systemctl enable docker

systemctl start docker

远程连接
vim  /usr/lib/systemd/system/docker.service

install上面添加

ExecStart=  
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock 

systemctl daemon-reload
systemctl restart docker


加速器
curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://eea88dbe.m.daocloud.io

安装docker-compose
curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
docker-compose --version


服务镜像
https://docs.docker.com/samples/

查看容器信息
docker inspect 容器id


安装rabbitmq
docker search rabbitmq:management
docker pull rabbitmq:management 
docker run --hostname rabbit --name rabbitmq -v /root/rabbit/:/var/rabbitmq/lib -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 5671:5671  -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 -d rabbitmq:management


安装mysql
docker pull mysql:5.7

docker run --name mysql -p 3306:3306 -v /root/data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=203204 -e MYSQL_ROOT_HOST=% -d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci




安装mongodb
docker search mongo
docker pull mongo
docker run --hostname mongo --name mongo -p 27017:27017 -v $PWD/mongo:/data/db -d mongo:latest
连接
docker run -it mongo:latest(镜像名) mongo --host 192.168.0.82 (执行镜像内部命令)


安装mongo管控台
docker search mongo-express
docker pull mongo-express
docker run -itd -p 8081:8081 --link bbdfc8b83a1b(mongo容器id):mongo mongo-express


安装redis
docker pull redis
docker run --hostname redis --name redis -p 6379:6379  -v /root/redis/data:/data -itd redis:latest redis-server  --appendonly yes
docker exec -it 43f7a65ec7f8 redis-cli


使用命令查看镜像的ip地址：docker inspect 66650c3bafd9 |grep -i add

安装nginx
docker search nginx
docker pull nginx
docker run --hostname nginx -p --name nginx 80:80 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs  -d nginx  

zookeeper集群安装
	docker-compose.yml

version: '3.1'

services:
  zoo1:
    image: zookeeper
    restart: always
    hostname: zoo1
    container_name: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=192.168.1.20:2888:3888 server.3=192.168.1.20:2888:3888

  zoo2:
    image: zookeeper
    restart: always
    container_name: zoo2
    hostname: zoo2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=192.168.1.20:2888:3888 server.2=0.0.0.0:2888:3888 server.3=192.168.1.20:2888:3888

  zoo3:
    image: zookeeper
    restart: always
    container_name: zoo3
    hostname: zoo3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=192.168.1.20:2888:3888 server.2=192.168.1.20:2888:3888 server.3=0.0.0.0:2888:3888

docker-compose -f docker-compose.yml up -d

docker run -d --name kafka1 --publish 9092:9092 --link zookeeper \
--env KAFKA_ZOOKEEPER_CONNECT=zookeeper_zoo1_1:2181,zookeeper_zoo2_1:2182,zookeeper_zoo3_1:2183 \
--env KAFKA_ADVERTISED_HOST_NAME=192.168.0.189 \
--env KAFKA_BROKER_ID=1 \
--env KAFKA_ADVERTISED_PORT=9092 \
--volume /etc/localtime:/etc/localtime \
wurstmeister/kafka:latest


docker run --name jenkins -p 8080:8080 -p 50000:50000 -u 0 -v /root/jenkins:/var/jenkins_home jenkins

faf5bf77080946d2b7a90a0889553ecd
/var/jenkins_home/secrets/initialAdminPassword


安装kafka集群
docker pull wurstmeister/kafka
docker pull sheepkiller/kafka-manager
docker pull wurstmeister/zookeeper

docker run -d --name kafka --publish 9092:9092 \ --link zookeeper \ --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \ --env KAFKA_ADVERTISED_HOST_NAME=192.168.1.20 \ --env KAFKA_ADVERTISED_PORT=9092 \ --volume /etc/localtime:/etc/localtime \ wurstmeister/kafka:latest


作者：月冷心寒
链接：https://www.jianshu.com/p/263164fdcac7
來源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。


安装gitlab
docker pull docker.io/gitlab/gitlab-ce
docker run -d --hostname douyoudian.gitlab.com --name gitlab --restart always -p 80:80 -p 222:22 -p 443:443 -v /root/gitlab/config:/etc/gitlab -v /root/gitlab/log:/var/log/gitlab -v /root/gitlab/data:/var/opt/gitlab 


安装elasticsearch
docker pull docker.elastic.co/elasticsearch/elasticsearch-oss:6.3.0
创建docker-compose.yml如下
version: '2.2'
services:
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.3.0
    container_name: elasticsearch1
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - esnet
  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.3.0
    container_name: elasticsearch2
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch1"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - esnet

volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local

networks:
  esnet:



安装centos并运行
docker run -itd e934aafc2206 /bin/bash

进入容器
docker exec -it e934aafc2206 /bin/bash


dockerHub安装
wget https://storage.googleapis.com/harbor-releases/release-1.5.0/harbor-offline-installer-v1.5.0.tgz

vim harbor.cfg 修改域名，https，证书地址，haradmin密码，数据库密码

./prepare

./install.sh


activity工作流安装
git clone https://github.com/Activiti/activiti-cloud-examples
cd activiti-cloud-examples
echo '127.0.0.1 activiti-cloud-sso-idm' | sudo tee -a /etc/hosts
cd docker
docker-compose -f infrastructure-docker-compose.yml up -d
docker-compose -f application-docker-compose.yml up -d
docker-compose -f frontend-docker-compose.yml up -d
docker-compose -f modelling-docker-compose.yml up -d

testuser
password

8180


docker run -p 80:80 \
-e "PGADMIN_DEFAULT_EMAIL=254870497@qq.com" \
-e "PGADMIN_DEFAULT_PASSWORD=203204" \
-d dpage/pgadmin4



docker登录
docker login docker.dyoud.com
docker tag 7d286259089f docker.dyoud.com/repo/rabbitmq:v1.0
docker push docker.dyoud.com/repo/rabbitmq:v1.0


centos开启指定端口
firewall-cmd --zone=public --add-port=80/tcp --permanent

关闭指定开放的端口
firewall-cmd --zone= public --remove-port=80/tcp --permanent
更新规则
firewall-cmd --reload

查看所有开放端口
firewall-cmd --zone=public --list-ports

firewall-cmd --zone= public --query-port=80/tcp


docker login docker.dyoud.com

docker logout docker.dyoud.com





docker run --hostname postgres --name postgres   -d -e "POSTGRES_DB=saga" -e "POSTGRES_USER=saga" -e "POSTGRES_PASSWORD=password" -p 5432:5432 postgres

docker run -d -p 8080:8080 -p 8090:8090 -e "JAVA_OPTS=-Dspring.profiles.active=prd -Dspring.datasource.url=jdbc:postgresql://192.168.1.20:5432/saga?useSSL=false" alpha-server:saga-0.2.0



docker run -h hadoop --name hadoop -p 2122:2122 -p 8030:8030 -p 8031:8031 -p 8032:8032 -p 8033:8033 -p 8040:8040 -p 8042:8042 -p 8088:8088 -p 19888:19888 -p 49707:49707 -p 50010:50010 -p 50020:50020 -p 50070:50070 -p 50075:50075 -p 50090:50090  -itd sequenceiq/hadoop-docker /etc/bootstrap.sh -bash



